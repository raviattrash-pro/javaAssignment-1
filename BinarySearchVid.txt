Binary search -> sorted array -> mid =l+r/2 change according

ceiling problem => smallest element in arr greater or = target
arr =[2,3,5,9,14,16,18]

celing(arr,target=14) =14
celing(arr,target=15) =16 -> 15 is greater than 14 nums will be 16,18 among them 16 is smallest so ans =16
target =4 -> 5  -> 

ceiling -> binary search -> in place of return -1 => return start
floor -> binary search -> in place of return -1 => return end
____________________________________________________________________

Q1.arr = ['a','b','c','j']
->TARGET =j

condition violation -> start = end+1;
					->Start%N(length)
					
code 
int start =0,end=arr.length-1;
while(start>end){
	int mid = start +(end-start)/2;
	if(target<arr[mid]){
		end = mid-1;
	}
	else{
		start = mid+1;
	}
}					
return arr[start%length];  // wrap around
}}	
______________________________________________________________________________

Q2 find first and last position of element in sorted array 

nums = [5,7,7,8,8,10];
target = 8
o/p =>[3,4]

->find first occurence of 7 
-> 1st approch -> 2 pointer from start and end 
-> 2nd approach -> twice binary search -> check start and end

first occurence -> e=m-1;
last occurence => s=m+1;

code 

public int[] searchRange(int[] nums,int target){
	int [] ans = {-1,-1};
	ans[0] = search(nums,target,findStartIndex:true);
	if(ans[0]!=-1){
		ans[1] =search(nums,target,findStartIndex:false);
	}
	return ans;
}

int search (int [] nums,int target ,boolean findStartIndex){
	int ans=-1;
	int start = 0;
	int end = nums.length;
	
	while(start<=end){
		int mid = start +(end-start)/2;
	if(target<arr[mid]){
		end = mid-1;
	}
	elseif(target>arr[mid]){
		start = mid+1;
	}else{
		ans = mid;
	}
	
	if(findStartIndex){
		end =mid-1;
	}
	else{
		start = mid+1;
	}
   }					
}
retun ans;
}

__________________________________________________________________________________

Q3 .find position of an element in a sorted array of infinte numbers

arra.length -> not availble

-> 1st we start with 0 and end is 1 -> then it is double the range -> 2,4,8,16,32....
->Apply binary search in range


code

static int ans (int [] arr,int target){
	int start =0;
	int end=1;
	while(target>arr[end]){
		int temp = end+1;
		end = end+(end-start+1)*2;
		start = temp;
	}
	retun binarySearch(arr,target,start,end);
}


_________________________________________________________________________________________________

Q4. Peak Index in a mountain Array 

arr = [1,2,3,5,7,6,3,2]
largetst -> 7 

-> 1st approach => linear search  + maxval
->2nd approach -> binary search

if (e[mid] > e[mid+1]) -> decending part 
e[mid]<e[mid+1]  -> accending part

when loop break 
-> start&end point tpo largest number 


code 

public int peak(int [] arr){
	int start =0;
	int end=arr.length;
	while(start<end){
		int mid = start +(end-start)/2;
	if(arr[mid]>arr[mid+1]){
		end = mid;
	}
	else{
		start = mid+1;
	}
	}
	retun start;
}

			



